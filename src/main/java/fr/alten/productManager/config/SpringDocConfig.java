package fr.alten.productManager.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;

@Configuration(proxyBeanMethods = false)
@OpenAPIDefinition
public class SpringDocConfig {
	
	@Bean
	public OpenAPI customOpenAPI(@Value("${server.port:8080}") int serverPort, Environment env) {
		return new OpenAPI()
                .addServersItem(new Server().url("/"))//prevent openapi from autogenerating path. Needed for HTTPS within docker on autogenerated web page to prevent openApi from generating an HTTP base path
				//https://swagger.io/docs/specification/authentication/
				.addSecurityItem(new SecurityRequirement().addList("Authorization"))
				.components(new Components().addSecuritySchemes("Authorization",
						new SecurityScheme()
						.scheme("bearer")
						.type(SecurityScheme.Type.HTTP)
						.bearerFormat("JWT")
						.name("Authorization")
						.in(SecurityScheme.In.HEADER)))
				.info(this.apiInfo(new Swagger(), serverPort, env));
	}
	
	private Info apiInfo(Swagger swagger, int serverPort, Environment env) {

		String serverAdress = "localhost:"+serverPort;

		return new Info()
				.title(swagger.getTitle())
				.version(swagger.getVersion())
				.description(swagger.getDescription().replace("{server}", serverAdress))
				.termsOfService(swagger.getTermsOfServiceUrl())
				.contact(new Contact().name(swagger.getContactName()).url(swagger.getContactUrl()).email(swagger.getContactEmail()))
				.license(new License().name(swagger.getLicense()).url(swagger.getLicenseUrl()));
	}
}
